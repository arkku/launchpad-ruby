#!/usr/bin/env ruby
# launchpad_game_of_life: A simple implementation of Conway's Game of Life
# displayed and controlled on a Novation Launchpad. The top left button (up
# arrow) pauses and resumes the game, the left and right arrows make it go
# slower and faster, respectively.
#
# This is not a particularly elegant implementation of Game of Life,
# the emphasis is on testing the Launchpad.
#
# Copyright (c) 2014 Kimmo Kulovesi, http://arkku.com/
# Use and distribute freely.
# Mark modified copies as such, do not remove the original attribution.
# ABSOLUTELY NO WARRANTY - USE AT YOUR OWN RISK ONLY!
##############################################################################
require_relative 'kk_launchpad'

class LaunchpadGameOfLife

  ROWS = 8
  COLUMNS = 8
  KEEP_LIVING_NEXT_GENERATION = { 2 => true, 3 => true }
  SPAWN_NEXT_GENERATION = { 3 => true }
  COLOR_SCHEMES = [
    { -1 => [ 1, 0 ], # dead
       0 => [ 2, 0 ], # just died
       1 => [ 2, 3 ], # just born
       2 => [ 0, 3 ]  # alive
    },
    { -1 => [ 0, 0 ],
       0 => [ 0, 0 ],
       1 => [ 1, 3 ],
       2 => [ 0, 3 ]
    },
    { -1 => [ 0, 0 ],
       0 => [ 0, 0 ],
       1 => [ 3, 3 ],
       2 => [ 3, 3 ]
    },
    { -1 => [ 0, 0 ],
       0 => [ 0, 0 ],
       1 => [ 3, 1 ],
       2 => [ 3, 1 ]
    },
    { -1 => [ 0, 0 ],
       0 => [ 0, 0 ],
       1 => [ 2, 0 ],
       2 => [ 3, 0 ]
    },
    { -1 => [ 0, 1 ],
       0 => [ 0, 1 ],
       1 => [ 0, 0 ],
       2 => [ 0, 0 ]
    },
    { -1 => [ 2, 0 ],
       0 => [ 2, 0 ],
       1 => [ 0, 0 ],
       2 => [ 0, 0 ]
    },
    { -1 => [ 3, 1 ],
       0 => [ 3, 1 ],
       1 => [ 0, 0 ],
       2 => [ 0, 0 ]
    }
  ]

  attr_reader :iteration

  def initialize(launchpad)
    @lp = launchpad
    @colors = COLOR_SCHEMES.first
    reset
  end

  # Is the cell alive?
  def cell_alive?(column, row)
    @cell_state[(row % ROWS) * ROWS + (column % COLUMNS)] > 0
  end

  # Toggle cell between dead and alive
  def toggle_cell(column, row)
    i = (row % ROWS) * ROWS + (column % COLUMNS)
    @cell_state[i] = (@cell_state[i] <= 0) ? 2 : -1
  end

  # Set the cell
  def set_cell(column, row, alive)
    @cell_state[(row % ROWS) * ROWS + (column % COLUMNS)] = alive ? 2 : -1
  end

  # Step the simulation forwards
  def step(generations = 1)
    cells = Array.new(ROWS * COLUMNS, 0)
    generations.times do
      0.upto(ROWS - 1) do |row|
        0.upto(COLUMNS - 1) do |column|
          cells[row * ROWS + column] = next_state(column, row)
        end
      end
      @cell_state = cells
      @iteration += 1
    end
    upload_state
  end

  # Clear the grid
  def clear
    @iteration = 0
    @cell_state = Array.new(ROWS * COLUMNS, -1)
    upload_state
  end

  # Toggle cells randomly
  def randomize(count = (ROWS * COLUMNS / 2))
    count.times do
      toggle_cell(rand(COLUMNS), rand(ROWS))
    end
    upload_state
  end

  # Reset the automaton as well as the Launchpad
  def reset
    @lp.reset
    @lp.set_duty_cycle(1, 4)
    @lp.double_buffer = true
    @lp.offline_updates = true
    clear
  end

  # Set the color scheme
  def color_scheme= (number)
    @colors = COLOR_SCHEMES[number % COLOR_SCHEMES.size]
    upload_state
  end

  # Get the next state for the given cell
  def next_state(column, row)
    live_count = 0
    [ [-1,  1], [0,  1],  [1,  1],
      [-1,  0],           [1,  0],
      [-1, -1], [0, -1],  [1, -1] ].each do |xo, yo|
      live_count += cell_alive?(column + xo, row + yo) ? 1 : 0
    end
    if cell_alive?(column, row)
      KEEP_LIVING_NEXT_GENERATION[live_count] ? 2 : 0
    else
      SPAWN_NEXT_GENERATION[live_count] ? 1 : -1
    end
  end

  # Upload the current state to the Launchpad
  def upload_state
    0.upto(ROWS - 1) do |row|
      0.upto(COLUMNS - 1) do |column|
        state = @cell_state[row * ROWS + column]
        @lp.set_led_colors(column, row, *@colors[state])
      end
    end
    @lp.set_led_colors(0, -1, *((@iteration % 2) == 0) ? [1,3] : [3,3])
    @lp.update
    @lp.flip_buffers
  end

end

lp = LaunchpadMIDI.device
game = LaunchpadGameOfLife.new(lp)
mutex = Mutex.new
fps = nil
old_fps = 4.0

# Read input in a background thread
input_thread = Thread.start do
  loop do
    lp.each_action do |column, row, pressed|
      next unless pressed
      begin
        mutex.synchronize do
          if row == -1
            # top row round buttons
            case column
            when 0
              # up arrow (play/pause)
              if fps
                old_fps = fps
                fps = nil
              else
                fps = old_fps
              end
            when 1
              # down arrow (clear)
              game.clear
            when 2
              # left arrow (slower)
              fps -= 1.0 if fps && fps > 1.0
            when 3
              # right arrow (faster)
              fps += 1.0 if fps && fps < 15.0
            when 7
              # mixer button (randomize)
              game.randomize
            else
            end
          elsif column == 8
            # side round buttons (choose color scheme)
            game.color_scheme = row
          else
            # square pads (toggle cells)
            game.toggle_cell(column, row)
            game.upload_state
          end
        end
      rescue Exception => e
        $stderr.puts "Input error: #{e}"
      end
    end
    sleep 0.02
  end
end

# Main loop
begin
  loop do
    delay = 0.5
    mutex.synchronize do
      if fps
        game.step
        delay = 1.0 / fps.to_f
      else
        delay = 0.5
      end
    end
    sleep delay
  end
ensure
  input_thread.kill
  lp.reset
end
